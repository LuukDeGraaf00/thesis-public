\begin{thebibliography}{10}

\bibitem{ecs-bevy}
C.~Anderson.
\newblock \url{https://bevyengine.org/learn/book/getting-started/ecs/}.

\bibitem{unity-ecs-patent}
J.~C. Ante and T.~Johansson.
\newblock Method and system for improved performance of a video game engine,
  March 2020.
\newblock Accessed at
  \url{https://patents.google.com/patent/US10599560B2/en?q=(US10599560B2)&oq=US10599560B2}.

\bibitem{clash}
C.~Baaij, M.~Kooijman, J.~Kuper, A.~Boeijink, and M.~Gerards.
\newblock C?ash: Structural descriptions of synchronous hardware using haskell.
\newblock In {\em 2010 13th Euromicro Conference on Digital System Design:
  Architectures, Methods and Tools}, pages 714--721, 2010.

\bibitem{cache-prefetching}
J.-L. Baer and T.-F. Chen.
\newblock An effective on-chip preloading scheme to reduce data access penalty.
\newblock In {\em Proceedings of the 1991 ACM/IEEE Conference on
  Supercomputing}, Supercomputing '91, page 176–186, New York, NY, USA, 1991.
  Association for Computing Machinery.

\bibitem{ecs-apecs}
J.~Carpay.
\newblock apecs: Fast entity-component-system library for game programming.
\newblock Accessed at \url{https://hackage.haskell.org/package/apecs}.

\bibitem{register-allocation}
G.~J. Chaitin, M.~A. Auslander, A.~K. Chandra, J.~Cocke, M.~E. Hopkins, and
  P.~W. Markstein.
\newblock Register allocation via coloring.
\newblock {\em Computer Languages}, 6:47--57, 1981.

\bibitem{associated-types}
M.~M.~T. Chakravarty, G.~Keller, S.~P. Jones, and S.~Marlow.
\newblock Associated types with class.
\newblock In {\em Proceedings of the 32nd ACM SIGPLAN-SIGACT Symposium on
  Principles of Programming Languages}, POPL '05, page 1–13, New York, NY,
  USA, 2005. Association for Computing Machinery.

\bibitem{intermediate-representation}
D.~Chisnall.
\newblock The challenge of cross-language interoperability.
\newblock {\em Commun. ACM}, 56(12):50–56, dec 2013.

\bibitem{automatic-vectorization}
J.~G. Feng, Y.~P. He, and Q.~M. Tao.
\newblock Evaluation of compilers’ capability of automatic vectorization
  based on source code analysis.
\newblock {\em Scientific Programming}, 2021, 2021.

\bibitem{accelerate-independent-regions}
M.~Fleuren.
\newblock Independently computed regions in a data parallel array language.
\newblock Master's thesis, Utrecht University, 2020.

\bibitem{assembly-optimizations}
A.~Fog.
\newblock Optimizing subroutines in assembly language: An optimization guide
  for x86 platforms, 2008.

\bibitem{polymorphic-variants-expression-problem}
J.~Garrigue.
\newblock Code reuse through polymorphic variants.
\newblock Presented at FOSE-2000, 2000.

\bibitem{datatype-generic-programming}
J.~Gibbons.
\newblock Datatype-generic programming.
\newblock In R.~Backhouse, J.~Gibbons, R.~Hinze, and J.~Jeuring, editors, {\em
  Datatype-Generic Programming}, pages 1--71, Berlin, Heidelberg, 2007.
  Springer Berlin Heidelberg.

\bibitem{kansas-lava}
A.~Gill, T.~Bull, G.~Kimmell, E.~Perrins, E.~Komp, and B.~Werling.
\newblock Introducing kansas lava.
\newblock In M.~T. Morazán and S.-B. Scholz, editors, {\em IFL}, volume 6041
  of {\em Lecture Notes in Computer Science}, pages 18--35. Springer, 2009.

\bibitem{llama}
B.~M. Gruber, G.~Amadio, J.~Blomer, A.~Matthes, R.~Widera, and M.~Bussmann.
\newblock Llama: The low‐level abstraction for memory access.
\newblock {\em Software: Practice and Experience}, 53(1):115–141, Mar. 2022.

\bibitem{abstraction-vectorization}
S.~Jubertie, I.~Masliah, and J.~Falcou.
\newblock Data layout and simd abstraction layers: Decoupling interfaces from
  implementations.
\newblock In {\em 2018 International Conference on High Performance Computing
  \& Simulation (HPCS)}, pages 531--538, 2018.

\bibitem{destructive-update-array}
G.~Korfiatis, M.~A. Papakyriakou, and N.~Papaspyrou.
\newblock A type and effect system for implementing functional arrays with
  destructive updates.
\newblock In M.~Ganzha, L.~A. Maciaszek, and M.~Paprzycki, editors, {\em
  Federated Conference on Computer Science and Information Systems, FedCSIS
  2011, Szczecin, Poland, 18-21 September 2011, Proceedings}, pages 879--886,
  2011.

\bibitem{LLVM}
C.~Lattner and V.~Adve.
\newblock Llvm: A compilation framework for lifelong program analysis \&
  transformation.
\newblock In {\em Proceedings of the International Symposium on Code Generation
  and Optimization: Feedback-Directed and Runtime Optimization}, CGO '04,
  page~75, USA, 2004. IEEE Computer Society.

\bibitem{thread-level-parallelism}
D.~T. Marr, F.~Binns, D.~L. Hill, G.~Hinton, D.~A. Koufaty, J.~A. Miller, and
  M.~Upton.
\newblock Hyper-threading technology architecture and microarchitecture.
\newblock {\em Intel Technology Journal}, 6(1):4--15, Feb. 2002.

\bibitem{ecs-origin}
A.~Martin.
\newblock Entity systems are the future of mmog development, 2007.
\newblock Accessed at
  \url{https://t-machine.org/index.php/2007/09/03/entity-systems-are-the-future-of-mmog-development-part-1/}.

\bibitem{accelerate-llvm}
T.~L. McDonell, M.~M.~T. Chakravarty, V.~Grover, and R.~R. Newton.
\newblock {Type-safe Runtime Code Generation: Accelerate to LLVM}.
\newblock In {\em Haskell '15: The 8th ACM SIGPLAN Symposium on Haskell}, pages
  201--212. ACM, Sept. 2015.

\bibitem{accelerate-array-fusion}
T.~L. McDonell, M.~M.~T. Chakravarty, G.~Keller, and B.~Lippmeier.
\newblock {Optimising Purely Functional GPU Programs}.
\newblock In {\em ICFP '13: The 18th ACM SIGPLAN International Conference on
  Functional Programming}. ACM, Sept. 2013.

\bibitem{accelerate-pattern-matching}
T.~L. McDonell, J.~D. Meredith, and G.~Keller.
\newblock Embedded pattern matching.
\newblock In {\em Proceedings of the 15th ACM SIGPLAN International Haskell
  Symposium}, Haskell 2022, page 123–136, New York, NY, USA, 2022.
  Association for Computing Machinery.

\bibitem{raytracing-reorder-ray}
D.~Meister, J.~Boksansk{\'y}, M.~Guthe, and J.~Bittner.
\newblock On ray reordering techniques for faster gpu ray tracing.
\newblock {\em Symposium on Interactive 3D Graphics and Games}, 2020.

\bibitem{ecs-flecs}
S.~Mertens.
\newblock \url{https://github.com/amethyst/legion}.

\bibitem{interleaved-SIMD}
D.~Nuzman, I.~Rosen, and A.~Zaks.
\newblock Auto-vectorization of interleaved data for simd.
\newblock In {\em Proceedings of the 27th ACM SIGPLAN Conference on Programming
  Language Design and Implementation}, PLDI '06, page 132–143, New York, NY,
  USA, 2006. Association for Computing Machinery.

\bibitem{threads-independent-scheduling}
Nvidia.
\newblock Nvidia tesla v100 gpu architecture.
\newblock Accessed at
  \url{https://docs.nvidia.com/cuda/volta-tuning-guide/index.html}.

\bibitem{hydra}
J.~O'Donnell.
\newblock Overview of hydra: a concurrent language for synchronous digital
  circuit design.
\newblock In {\em Proceedings 16th International Parallel and Distributed
  Processing Symposium}, pages 9 pp--, 2002.

\bibitem{generic-programming}
A.~Rodriguez, J.~Jeuring, P.~Jansson, A.~Gerdes, O.~Kiselyov, and B.~C. d.~S.
  Oliveira.
\newblock Comparing libraries for generic programming in haskell.
\newblock In {\em Proceedings of the First ACM SIGPLAN Symposium on Haskell},
  Haskell '08, page 111–122, New York, NY, USA, 2008. Association for
  Computing Machinery.

\bibitem{forsyde}
I.~Sander and A.~Jantsch.
\newblock System modeling and transformational design refinement in forsyde
  [formal system design].
\newblock {\em IEEE Transactions on Computer-Aided Design of Integrated
  Circuits and Systems}, 23(1):17--32, 2004.

\bibitem{futhark-sum-types}
R.~Schenck.
\newblock Sum types in futhark, 2019.

\bibitem{instruction-level-parallelism}
M.~Schlansker, B.~R. Rau, S.~A. Mahlke, V.~Kathail, R.~Johnson, S.~Anik, and
  S.~G. Abraham.
\newblock Achieving high levels of instruction-level parallelism with reduced
  hardware complexity.
\newblock 1997.

\bibitem{shallow-and-deep}
J.~Svenningsson and E.~Axelsson.
\newblock Combining deep and shallow embedding of domain-specific languages.
\newblock {\em Computer Languages, Systems \& Structures}, 44:143--165, 2015.
\newblock SI: TFP 2011/12.

\bibitem{accelerate-sum-types}
R.~van Hoef.
\newblock Accelerating sum types.
\newblock Master's thesis, Utrecht University, 2022.

\bibitem{expression-problem}
P.~Wadler.
\newblock The expression problem, 1998.
\newblock Accessed at
  \url{https://homepages.inf.ed.ac.uk/wadler/papers/expression/expression.txt}.

\bibitem{accelerate-performance}
B.~Wijgers.
\newblock Investigating the performance of the implementations of embedded
  languages in haskell.
\newblock Master's thesis, Utrecht University, 2022.

\end{thebibliography}
