\begin{thebibliography}{10}

\bibitem{raytracing-reorder-ray}
Daniel~Meister 0002, Jakub Boksansk{\'y}, Michael Guthe, and Jir{\'i} Bittner.
\newblock On ray reordering techniques for faster gpu ray tracing.
\newblock In Dan Casas, Eric Haines, Sheldon Andrews, Natalya Tatarchuk, and
  Zdravko Velinov, editors, {\em I3D '20: Symposium on Interactive 3D Graphics
  and Games, San Francisco, CA, USA, September 15-17, 2020}, pages 13:1--13:9.
  ACM, 2020.

\bibitem{unity-ecs-patent}
Joachim~Christoph Ante and Tim Johansson.
\newblock Method and system for improved performance of a video game engine,
  March 2020.

\bibitem{clash}
Christiaan Baaij, Matthijs Kooijman, Jan Kuper, Arjan Boeijink, and Marco
  Gerards.
\newblock Clash: Structural descriptions of synchronous hardware using haskell,
  2010.

\bibitem{cache-prefetching}
J.~L. Baer and T.~F. Chen.
\newblock An effictive on-chip preloading scheme to reduce data access penalty.
\newblock In {\em Supercomputing 1991}, pages 179--186, November 1991.

\bibitem{ecs-apecs}
Jonas Carpay.
\newblock apecs: Fast entity-component-system library for game programming.
\newblock \url{https://hackage.haskell.org/package/apecs}.

\bibitem{register-allocation}
G.~J. Chaitin, M.~A. Auslander, A.~K. Chandra, J.~Cocke, M.~E. Hopkins, and
  P.~W. Markstein.
\newblock Register allocation via coloring.
\newblock {\em Computer Languages}, 6:47--57, 1981.

\bibitem{intermediate-representation}
David Chisnall.
\newblock The challenge of cross-language interoperability, 2013.

\bibitem{memory}
U.~Drepper.
\newblock What every programmer should know about memory.
\newblock {\em Red Hat, Inc}, 2007.

\bibitem{automatic-vectorization}
Jing~Ge Feng, Ye~Ping He, and Qiu~Ming Tao.
\newblock Evaluation of compilersâ€™ capability of automatic vectorization
  based on source code analysis.
\newblock {\em Scientific Programming}, 2021, 2021.

\bibitem{accelerate-independent-regions}
Martijn Fleuren.
\newblock Independently computed regions in a data parallel array language,
  2020.

\bibitem{assembly-optimizations}
A.~Fog.
\newblock Optimizing subroutines in assembly language: An optimization guide
  for x86 platforms, 2008.

\bibitem{ecs-specs}
Amethyst Foundation.
\newblock The specs book.
\newblock \url{https://specs.amethyst.rs/docs/tutorials/}.

\bibitem{STM-monad}
Tim Harris, Simon Marlow, and Simon Peyton~Jones.
\newblock Composable memory transactions.
\newblock In {\em PPoPP '05: Proceedings of the tenth ACM SIGPLAN symposium on
  Principles and practice of parallel programming}, pages 48--60. ACM Press,
  January 2005.

\bibitem{programming-optimization}
Paul Hsieh.
\newblock Programming optimization, 2016.

\bibitem{destructive-update-array}
Georgios Korfiatis, Michalis~A. Papakyriakou, and Nikolaos Papaspyrou.
\newblock A type and effect system for implementing functional arrays with
  destructive updates.
\newblock In Maria Ganzha, Leszek~A. Maciaszek, and Marcin Paprzycki, editors,
  {\em Federated Conference on Computer Science and Information Systems,
  FedCSIS 2011, Szczecin, Poland, 18-21 September 2011, Proceedings}, pages
  879--886, 2011.

\bibitem{LLVM}
Chris Lattner and Vikram~S. Adve.
\newblock Llvm: A compilation framework for lifelong program analysis \&
  transformation.
\newblock In {\em CGO}, pages 75--88. IEEE Computer Society, 2004.

\bibitem{thread-level-parallelism}
Deborah~T. Marr, Frank Binns, David~L. Hill, Glenn Hinton, David~A. Koufaty,
  J.~Alan Miller, and Michael Upton.
\newblock Hyper-threading technology architecture and microarchitecture.
\newblock {\em Intel Technology Journal}, 6(1):4--15, February 2002.

\bibitem{ecs-origin}
Adam Martin.
\newblock Entity systems are the future of mmog development, 2007.

\bibitem{accelerate-llvm}
Trevor~L. McDonell, Manuel M~T Chakravarty, Vinod Grover, and Ryan~R Newton.
\newblock {Type-safe Runtime Code Generation: Accelerate to LLVM}.
\newblock In {\em Haskell '15: The 8th ACM SIGPLAN Symposium on Haskell}, pages
  201--212. ACM, September 2015.

\bibitem{accelerate-array-fusion}
Trevor~L. McDonell, Manuel M~T Chakravarty, Gabriele Keller, and Ben Lippmeier.
\newblock {Optimising Purely Functional GPU Programs}.
\newblock In {\em ICFP '13: The 18th ACM SIGPLAN International Conference on
  Functional Programming}. ACM, September 2013.

\bibitem{accelerate-pattern-matching}
Trevor~L. McDonell, Joshua~D. Meredith, and Gabriele Keller.
\newblock Embedded pattern matching.
\newblock In {\em Proceedings of the 15th {ACM} {SIGPLAN} International Haskell
  Symposium}. {ACM}, sep 2022.

\bibitem{interleaved-SIMD}
Dorit Nuzman, Ira Rosen, and Ayal Zaks.
\newblock Auto-vectorization of interleaved data for {SIMD}.
\newblock {\em PLDI'06}, pages 132--143, June 2006.

\bibitem{threads-independent-scheduling}
Nvidia.
\newblock Nvidia tesla v100 gpu architecture.

\bibitem{futhark-sum-types}
Robert Schenck.
\newblock Sum types in futhark, 2019.

\bibitem{instruction-level-parallelism}
Michael~S. Schlansker, B.~Ramakrishna Rau, Scott Mahlke, Vinod Kathail, Richard
  Johnson, Sadun Anik, and Santosh~G. Abraham.
\newblock Achieving high levels of instruction-level parallelism with reduced
  hardware complexity.
\newblock Technical Report HPL-96-120, Hewlett--Packard Corporation, 2000.

\bibitem{accelerate-sum-types}
Rick van Hoef.
\newblock Accelerating sum types, 2022.

\bibitem{accelerate-performance}
Bart Wijgers.
\newblock Investigating the performance of the implementations of embedded
  languages in haskell, 2022.

\end{thebibliography}
